/**
 *  Arcade Power Button
 *
 *  Copyright 2021 Patrick Greenwell
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "Arcade", namespace: "Arcade_Power", author: "Patrick Greenwell") {
		capability "Switch"


		command "toggle"
	}

    preferences {
        // the LAN IP address and port for the server for example: 192.168.0.100:8080
        input("host", "string", title:"Host", description: "The IP address and port of the ESP32.", required: true, displayDuringSetup: true)
	}

	simulator {
		// TODO: define status and reply messages here
	}

	tiles {
		// TODO: define your main and details tiles here

 		standardTile("actionFlat", "device.switch", width: 2, height: 2, canChangeIcon: true) {
            state "off", label: '${name}', action: "on", icon: "st.switches.switch.off", backgroundColor: "#ffffff",nextState:"on"
            state "on", label: '${name}', action: "off", icon: "st.switches.switch.on", backgroundColor: "#00a0dc",nextState:"off"
		}
        
//        details(["controllerstatus","on","off"])
	}

		}

//
def getHostAddress() {    
	return "${host}"
}

//
def on() {
	toggle()
}

//
def off() {
	toggle()
}


//
def toggle() {
	def cmds = []
	cmds << http_command("/ArcadePWR/toggle/activate")
    log.debug cmds
	sendEvent(name: "toggle", value: "pushed", data: [buttonNumber: "1"], descriptionText: "$device.displayName Arcade Power button was pushed", isStateChange: true)
    return cmds
}

// 
private http_command(uri) {
	log.debug("Executing hubaction ${uri} on " + getHostAddress())

    def hubAction = new physicalgraph.device.HubAction(
    	method: "GET",
        path: uri,
        headers: [HOST:getHostAddress()])

    return hubAction
}